{
    "project": {},
    "files": {
        "common\\jmControl.js": {
            "name": "common\\jmControl.js",
            "modules": {},
            "classes": {
                "jmControl": 1
            },
            "fors": {
                "jmGraph": 1,
                "jmControl": 1
            },
            "namespaces": {}
        },
        "common\\jmEvents.js": {
            "name": "common\\jmEvents.js",
            "modules": {},
            "classes": {
                "jmEvents": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "common\\jmModels.js": {
            "name": "common\\jmModels.js",
            "modules": {},
            "classes": {
                "jmGradient": 1,
                "jmShadow": 1
            },
            "fors": {
                "jmGraph": 1,
                "jmGradient": 1,
                "jmShadow": 1
            },
            "namespaces": {}
        },
        "common\\jmProperty.js": {
            "name": "common\\jmProperty.js",
            "modules": {},
            "classes": {
                "jmObject": 1,
                "jmProperty": 1
            },
            "fors": {
                "jmGraph": 1,
                "jmObject": 1,
                "jmProperty": 1
            },
            "namespaces": {}
        },
        "common\\jmSvg.js": {
            "name": "common\\jmSvg.js",
            "modules": {
                "jmSVG": 1
            },
            "classes": {
                "jmSVG": 1,
                "jmVML": 1,
                "jmSVGElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "common\\jmUtils.js": {
            "name": "common\\jmUtils.js",
            "modules": {
                "jmUtils": 1
            },
            "classes": {
                "jmUtils": 1,
                "jmUtils.list": 1
            },
            "fors": {
                "jmUtils": 1,
                "list": 1,
                "cache": 1,
                "jmUtils.cache": 1
            },
            "namespaces": {
                "jmUtils": 1
            }
        },
        "controls\\jmArrawLine.js": {
            "name": "controls\\jmArrawLine.js",
            "modules": {},
            "classes": {
                "jmArrawLine": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "controls\\jmImage.js": {
            "name": "controls\\jmImage.js",
            "modules": {},
            "classes": {
                "jmImage": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "controls\\jmLabel.js": {
            "name": "controls\\jmLabel.js",
            "modules": {},
            "classes": {
                "jmLabel": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "controls\\jmResize.js": {
            "name": "controls\\jmResize.js",
            "modules": {},
            "classes": {
                "jmResize": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "editor\\jmCell.js": {
            "name": "editor\\jmCell.js",
            "modules": {
                "jmEditor": 1
            },
            "classes": {
                "jmCell": 1,
                "jmConnectLine": 1
            },
            "fors": {
                "jmEditor": 1,
                "jmCell": 1,
                "jmHArc": 1,
                "jmConnectLine": 1
            },
            "namespaces": {}
        },
        "editor\\jmEditor.js": {
            "name": "editor\\jmEditor.js",
            "modules": {},
            "classes": {
                "jmEditor": 1,
                "jmEditorDefaultStyle": 1
            },
            "fors": {
                "jmEditor": 1,
                "jmEditorDefaultStyle": 1,
                "menus": 1
            },
            "namespaces": {}
        },
        "lib\\excanvas.js": {
            "name": "lib\\excanvas.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "shapes\\jmArc.js": {
            "name": "shapes\\jmArc.js",
            "modules": {
                "jmGraph": 1
            },
            "classes": {
                "jmArc": 1
            },
            "fors": {
                "jmGraph": 1,
                "jmArc": 1
            },
            "namespaces": {}
        },
        "shapes\\jmArraw.js": {
            "name": "shapes\\jmArraw.js",
            "modules": {},
            "classes": {
                "jmArraw": 1
            },
            "fors": {
                "jmGraph": 1,
                "jmArraw": 1
            },
            "namespaces": {}
        },
        "shapes\\jmBezier.js": {
            "name": "shapes\\jmBezier.js",
            "modules": {},
            "classes": {
                "jmBezier": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "shapes\\jmCircle.js": {
            "name": "shapes\\jmCircle.js",
            "modules": {},
            "classes": {
                "jmCircle": 1
            },
            "fors": {
                "jmGraph": 1,
                "jmCircle": 1
            },
            "namespaces": {}
        },
        "shapes\\jmHArc.js": {
            "name": "shapes\\jmHArc.js",
            "modules": {},
            "classes": {
                "jmHArc": 1
            },
            "fors": {
                "jmGraph": 1,
                "jmHArc": 1
            },
            "namespaces": {}
        },
        "shapes\\jmLine.js": {
            "name": "shapes\\jmLine.js",
            "modules": {},
            "classes": {
                "jmLine": 1
            },
            "fors": {
                "jmGraph": 1,
                "jmLine": 1
            },
            "namespaces": {}
        },
        "shapes\\jmPath.js": {
            "name": "shapes\\jmPath.js",
            "modules": {},
            "classes": {
                "jmPath": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "shapes\\jmPrismatic.js": {
            "name": "shapes\\jmPrismatic.js",
            "modules": {},
            "classes": {
                "jmPrismatic": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "shapes\\jmRect.js": {
            "name": "shapes\\jmRect.js",
            "modules": {},
            "classes": {
                "jmRect": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "shapes\\jmShape.js": {
            "name": "shapes\\jmShape.js",
            "modules": {},
            "classes": {
                "jmShape": 1
            },
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        },
        "jmGraph.js": {
            "name": "jmGraph.js",
            "modules": {},
            "classes": {
                "jmGraph": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "loadJMGraph.js": {
            "name": "loadJMGraph.js",
            "modules": {},
            "classes": {},
            "fors": {
                "jmGraph": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "jmGraph": {
            "name": "jmGraph",
            "submodules": {},
            "classes": {
                "jmControl": 1,
                "jmGraph": 1,
                "jmEvents": 1,
                "jmGradient": 1,
                "jmShadow": 1,
                "jmObject": 1,
                "jmProperty": 1,
                "jmImage": 1,
                "jmLabel": 1,
                "jmResize": 1,
                "jmCell": 1,
                "jmHArc": 1,
                "jmArraw": 1,
                "jmBezier": 1,
                "jmCircle": 1,
                "jmLine": 1,
                "jmPath": 1,
                "jmPrismatic": 1,
                "jmRect": 1,
                "jmShape": 1
            },
            "fors": {
                "jmGraph": 1,
                "jmControl": 1,
                "jmGradient": 1,
                "jmShadow": 1,
                "jmObject": 1,
                "jmProperty": 1,
                "jmEditor": 1,
                "jmArc": 1,
                "jmArraw": 1,
                "jmCircle": 1,
                "jmHArc": 1,
                "jmLine": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "shapes\\jmShape.js",
            "line": 1,
            "description": "圆弧图型 继承自jmPath\n参数params说明:center=当前圆弧中心,radius=圆弧半径,start=圆弧起始角度,end=圆弧结束角度,anticlockwise=是否为顺时针",
            "params": [
                {
                    "name": "canvas",
                    "description": "标签canvas",
                    "type": "Element"
                }
            ],
            "require": "jmControl"
        },
        "jmSVG": {
            "name": "jmSVG",
            "submodules": {},
            "classes": {
                "jmSVG": 1,
                "jmVML": 1,
                "jmSVGElement": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "common\\jmSvg.js",
            "line": 161,
            "description": "SVG基础封装",
            "params": [
                {
                    "name": "tag",
                    "description": "元素名",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "模式(svg/vml)",
                    "type": "String"
                }
            ]
        },
        "jmUtils": {
            "name": "jmUtils",
            "submodules": {},
            "classes": {
                "jmUtils": 1,
                "jmUtils.list": 1,
                "list": 1,
                "jmUtils.cache": 1,
                "jmArrawLine": 1
            },
            "fors": {
                "jmUtils": 1,
                "list": 1,
                "cache": 1,
                "jmUtils.cache": 1,
                "jmGraph": 1
            },
            "namespaces": {
                "jmUtils": 1
            },
            "tag": "module",
            "file": "controls\\jmArrawLine.js",
            "line": 1,
            "description": "画图基础对象\n当前库的工具类"
        },
        "jmEditor": {
            "name": "jmEditor",
            "submodules": {},
            "classes": {
                "jmEditor": 1,
                "jmConnectLine": 1,
                "jmEditorDefaultStyle": 1,
                "menus": 1,
                "jmArc": 1
            },
            "fors": {
                "jmCell": 1,
                "jmHArc": 1,
                "jmEditor": 1,
                "jmConnectLine": 1,
                "jmEditorDefaultStyle": 1,
                "menus": 1,
                "jmGraph": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "shapes\\jmArc.js",
            "line": 1,
            "description": "流程编辑器单元,继承自jmControl\n参数说明:resizable=是否可改变大小，connectable=是否可连线,value =当前显示字符串,position=单元位置,editor=当前单元所属编辑器,graph=画布,style=样式对象或名称"
        }
    },
    "classes": {
        "jmControl": {
            "name": "jmControl",
            "shortname": "jmControl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "file": "common\\jmControl.js",
            "line": 1,
            "description": "控件基础对象\n控件的基础属性和方法"
        },
        "jmGraph": {
            "name": "jmGraph",
            "shortname": "jmGraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "jmGraph.js",
            "line": 2,
            "description": "jmGraph画图类库\n对canvas画图api进行二次封装，使其更易调用，省去很多重复的工作。"
        },
        "jmEvents": {
            "name": "jmEvents",
            "shortname": "jmEvents",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "file": "common\\jmEvents.js",
            "line": 1,
            "description": "事件模型"
        },
        "jmGradient": {
            "name": "jmGradient",
            "shortname": "jmGradient",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "common\\jmModels.js",
            "line": 2,
            "description": "渐变类",
            "params": [
                {
                    "name": "op",
                    "description": "渐变参数,type:[linear= 线性渐变,radial=放射性渐变]",
                    "type": "Object"
                }
            ]
        },
        "jmShadow": {
            "name": "toGlow",
            "shortname": "jmShadow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "common\\jmModels.js",
            "line": 150,
            "description": "转换为raphael的光晕对象",
            "params": [
                {
                    "name": "x",
                    "description": "横坐标偏移量",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "纵坐标编移量",
                    "type": "Number"
                },
                {
                    "name": "blur",
                    "description": "模糊值",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "阴影的颜色",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "return": {
                "description": "raphael的光晕对象",
                "type": "Object"
            }
        },
        "jmObject": {
            "name": "jmObject",
            "shortname": "jmObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "common\\jmProperty.js",
            "line": 2,
            "description": "所有jm对象的基础对象"
        },
        "jmProperty": {
            "name": "jmProperty",
            "shortname": "jmProperty",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "common\\jmProperty.js",
            "line": 93,
            "description": "对象属性管理",
            "require": "jmObject"
        },
        "jmSVG": {
            "name": "jmSVG",
            "shortname": "jmSVG",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmSVG",
            "namespace": "",
            "file": "common\\jmSvg.js",
            "line": 2,
            "description": "SVG基础封装"
        },
        "jmVML": {
            "name": "jmVML",
            "shortname": "jmVML",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmSVG",
            "namespace": "",
            "file": "common\\jmSvg.js",
            "line": 115,
            "description": "vml基础封装，用于jmgraph兼容ie9以下浏览器"
        },
        "jmSVGElement": {
            "name": "jmSVGElement",
            "shortname": "jmSVGElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmSVG",
            "namespace": "",
            "file": "common\\jmSvg.js",
            "line": 161,
            "description": "SVG元素对象"
        },
        "jmUtils": {
            "name": "jmUtils",
            "shortname": "jmUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmUtils",
            "namespace": "",
            "file": "common\\jmUtils.js",
            "line": 2,
            "description": "画图基础对象\n当前库的工具类",
            "static": 1
        },
        "jmUtils.list": {
            "name": "jmUtils.list",
            "shortname": "jmUtils.list",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmUtils",
            "namespace": "jmUtils",
            "file": "common\\jmUtils.js",
            "line": 80,
            "description": "自定义集合",
            "params": [
                {
                    "name": "arr",
                    "description": "数组，可转为当前list元素",
                    "type": "Array",
                    "optional": true
                }
            ]
        },
        "list": {
            "name": "list",
            "shortname": "list",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmUtils",
            "namespace": ""
        },
        "jmUtils.cache": {
            "name": "jmUtils.cache",
            "shortname": "cache",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmUtils",
            "namespace": "jmUtils"
        },
        "jmArrawLine": {
            "name": "jmArrawLine",
            "shortname": "jmArrawLine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmUtils",
            "namespace": "",
            "file": "controls\\jmArrawLine.js",
            "line": 1,
            "description": "带箭头的直线,继承jmPath",
            "params": [
                {
                    "name": "graph",
                    "description": "当前画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "生成当前直线的参数对象，(style=当前线条样式,start=直线起始点,end=直线终结点)",
                    "type": "Object"
                }
            ]
        },
        "jmImage": {
            "name": "jmImage",
            "shortname": "jmImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "controls\\jmImage.js",
            "line": 1,
            "description": "图片控件，继承自jmControl\nparams参数中image为指定的图片源地址或图片img对象，\npostion=当前控件的位置，width=其宽度，height=高度，sposition=从当前图片中展示的位置，swidth=从图片中截取的宽度,sheight=从图片中截取的高度。",
            "require": "jmControl",
            "params": [
                {
                    "name": "graph",
                    "description": "当前画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "控件参数",
                    "type": "Object"
                }
            ]
        },
        "jmLabel": {
            "name": "jmLabel",
            "shortname": "jmLabel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "controls\\jmLabel.js",
            "line": 2,
            "description": "显示文字控件\nparams参数:style=样式，value=显示的文字",
            "params": [
                {
                    "name": "graph",
                    "description": "当前画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "文字控件参数",
                    "type": "Object"
                }
            ]
        },
        "jmResize": {
            "name": "jmResize",
            "shortname": "jmResize",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "controls\\jmResize.js",
            "line": 2,
            "description": "可拉伸的缩放控件\n继承jmRect\n如果此控件加入到了当前控制的对象的子控件中，请在参数中加入movable:false，否则导致当前控件会偏离被控制的控件。"
        },
        "jmCell": {
            "name": "jmCell",
            "shortname": "jmCell",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "editor\\jmCell.js",
            "line": 2,
            "description": "流程编辑器单元,继承自jmControl\n参数说明:resizable=是否可改变大小，connectable=是否可连线,value =当前显示字符串,position=单元位置,editor=当前单元所属编辑器,graph=画布,style=样式对象或名称",
            "params": [
                {
                    "name": "option",
                    "description": "参数",
                    "type": "Object"
                }
            ]
        },
        "jmEditor": {
            "name": "jmEditor",
            "shortname": "jmEditor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmEditor",
            "namespace": "",
            "file": "editor\\jmEditor.js",
            "line": 76,
            "description": "jm流程图编辑器\n继承jmProperty\noption参数:connectable=是否可连线，enabled=是否可编辑",
            "params": [
                {
                    "name": "option",
                    "description": "流程图参数",
                    "type": "Object"
                }
            ]
        },
        "jmHArc": {
            "name": "jmHArc",
            "shortname": "jmHArc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "shapes\\jmHArc.js",
            "line": 1,
            "description": "画空心圆弧,继承自jmPath",
            "params": [
                {
                    "name": "graph",
                    "description": "画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "空心圆参数:minRadius=中心小圆半径,maxRadius=大圆半径,start=起始角度,end=结束角度,anticlockwise=是否为顺时针",
                    "type": "Object"
                }
            ]
        },
        "jmConnectLine": {
            "name": "jmConnectLine",
            "shortname": "jmConnectLine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmEditor",
            "namespace": "",
            "file": "editor\\jmCell.js",
            "line": 580,
            "description": "二元素之间的连线,继承自jmPath\n连线参数:from=起始元素，to=目标元素,value=连线值",
            "params": [
                {
                    "name": "graph",
                    "description": "当前画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "连线参数",
                    "type": "Object"
                }
            ]
        },
        "jmEditorDefaultStyle": {
            "name": "jmEditorDefaultStyle",
            "shortname": "jmEditorDefaultStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmEditor",
            "namespace": "",
            "file": "editor\\jmEditor.js",
            "line": 2,
            "description": "编辑器默认样式",
            "static": 1
        },
        "menus": {
            "name": "menus",
            "shortname": "menus",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmEditor",
            "namespace": ""
        },
        "jmArc": {
            "name": "jmArc",
            "shortname": "jmArc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmEditor",
            "namespace": "",
            "file": "shapes\\jmArc.js",
            "line": 1,
            "description": "圆弧图型 继承自jmPath\n参数params说明:center=当前圆弧中心,radius=圆弧半径,start=圆弧起始角度,end=圆弧结束角度,anticlockwise=是否为顺时针",
            "require": "jmGraph",
            "params": [
                {
                    "name": "graph",
                    "description": "画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "圆弧参数",
                    "type": "Object"
                }
            ]
        },
        "jmArraw": {
            "name": "jmArraw",
            "shortname": "jmArraw",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "shapes\\jmArraw.js",
            "line": 2,
            "description": "画箭头,继承自jmPath",
            "params": [
                {
                    "name": "graph",
                    "description": "当前画布",
                    "type": "JmGraph"
                },
                {
                    "name": "生成箭头所需的参数",
                    "description": "",
                    "type": "Object"
                }
            ]
        },
        "jmBezier": {
            "name": "jmBezier",
            "shortname": "jmBezier",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "shapes\\jmBezier.js",
            "line": 1,
            "description": "贝塞尔曲线,继承jmPath\nN阶，参数points中为控制点",
            "params": [
                {
                    "name": "graph",
                    "description": "画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "参数",
                    "type": "Object"
                }
            ]
        },
        "jmCircle": {
            "name": "jmCircle",
            "shortname": "jmCircle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "shapes\\jmCircle.js",
            "line": 1,
            "description": "画完整的圆",
            "params": [
                {
                    "name": "graph",
                    "description": "画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "圆的参数:center=圆中心,radius=圆半径,优先取此属性，如果没有则取宽和高,width=圆宽,height=圆高",
                    "type": "Object"
                }
            ]
        },
        "jmLine": {
            "name": "jmLine",
            "shortname": "jmLine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "shapes\\jmLine.js",
            "line": 1,
            "description": "画一条直线",
            "params": [
                {
                    "name": "graph",
                    "description": "当前画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "直线参数:start=起始点,end=结束点,lineType=线类型(solid=实线，dotted=虚线),dashLength=虚线间隔(=4)",
                    "type": "Object"
                }
            ]
        },
        "jmPath": {
            "name": "jmPath",
            "shortname": "jmPath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "shapes\\jmPath.js",
            "line": 1,
            "description": "基础路径,大部分图型的基类\n指定一系列点，画出图形",
            "params": [
                {
                    "name": "graph",
                    "description": "画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "路径参数 points=所有描点",
                    "type": "Object"
                }
            ]
        },
        "jmPrismatic": {
            "name": "jmPrismatic",
            "shortname": "jmPrismatic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "shapes\\jmPrismatic.js",
            "line": 1,
            "description": "画棱形",
            "params": [
                {
                    "name": "graph",
                    "description": "画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "参数 center=棱形中心点，width=棱形宽,height=棱形高",
                    "type": "Object"
                }
            ]
        },
        "jmRect": {
            "name": "jmRect",
            "shortname": "jmRect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "shapes\\jmRect.js",
            "line": 1,
            "description": "画矩形",
            "params": [
                {
                    "name": "graph",
                    "description": "画布",
                    "type": "JmGraph"
                },
                {
                    "name": "params",
                    "description": "参数 position=矩形左上角顶点坐标,width=宽，height=高,radius=边角弧度",
                    "type": "Object"
                }
            ]
        },
        "jmShape": {
            "name": "jmShape",
            "shortname": "jmShape",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jmGraph",
            "namespace": "",
            "file": "shapes\\jmShape.js",
            "line": 1,
            "description": "图型基础类"
        }
    },
    "classitems": [
        {
            "file": "common\\jmControl.js",
            "line": 13,
            "description": "初始化对象，设定样式，初始化子控件对象\n此方法为所有控件需调用的方法",
            "itemtype": "method",
            "name": "initializing",
            "params": [
                {
                    "name": "context",
                    "description": "当前画布",
                    "type": "Canvas"
                },
                {
                    "name": "style",
                    "description": "当前控件的样式",
                    "type": "Style"
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 63,
            "description": "根据控件zIndex排序，越大的越高",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 91,
            "description": "设置鼠标指针",
            "itemtype": "method",
            "name": "cursor",
            "params": [
                {
                    "name": "cur",
                    "description": "css鼠标指针标识,例如:pointer,move等",
                    "type": "String"
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 110,
            "description": "设定样式到context\n处理样式映射，转换渐变和阴影对象为标准canvas属性",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "style",
                    "description": "样式对象，如:{fill:'black',stroke:'red'}",
                    "type": "Style"
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 122,
            "description": "样式设定",
            "itemtype": "method",
            "name": "__setStyle",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "control",
                    "description": "当前样式对应的控件对象",
                    "type": "JmControl"
                },
                {
                    "name": "style",
                    "description": "样式",
                    "type": "Style"
                },
                {
                    "name": "name",
                    "description": "样式名称",
                    "type": "String"
                },
                {
                    "name": "mpkey",
                    "description": "样式名称在映射中的key(例如：shadow.blur为模糊值)",
                    "type": "String"
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 194,
            "description": "获取当前控件的边界\n通过分析控件的描点或位置加宽高得到为方形的边界",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "控件的边界描述对象(left,top,right,bottom,width,height)",
                "type": "Object"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 242,
            "description": "获取当前控件的位置相关参数\n解析百分比和margin参数",
            "itemtype": "method",
            "name": "getLocation",
            "return": {
                "description": "当前控件位置参数，包括中心点坐标，右上角坐标，宽高",
                "type": "Object"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 314,
            "description": "获取或设定位置坐标",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "p",
                    "description": "位置参数{x:1,y:1} ,如果为空则返回当前位置",
                    "type": "Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前控件的位置",
                "type": "Point"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 325,
            "description": "设定或获取宽度",
            "itemtype": "method",
            "name": "width",
            "params": [
                {
                    "name": "w",
                    "description": "宽度，如果为空则返回当前宽度",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "控件的当前宽度",
                "type": "Nubmer"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 336,
            "description": "设定或获取高度",
            "itemtype": "method",
            "name": "height",
            "params": [
                {
                    "name": "h",
                    "description": "高度",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前控件的高度",
                "type": "Number"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 347,
            "description": "对控件进行平移\n遍历控件所有描点或位置，设置其偏移量。",
            "itemtype": "method",
            "name": "offset",
            "params": [
                {
                    "name": "x",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "trans",
                    "description": "是否传递,监听者可以通过此属性是否决定是否响应移动事件,默认=true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 409,
            "description": "获取控件相对于画布的绝对边界，\n与getBounds不同的是：getBounds获取的是相对于父容器的边界.",
            "itemtype": "method",
            "name": "getAbsoluteBounds",
            "return": {
                "description": "边界对象(left,top,right,bottom,width,height)",
                "type": "Object"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 435,
            "description": "画控件前初始化\n执行beginPath开始控件的绘制",
            "itemtype": "method",
            "name": "beginDraw",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 446,
            "description": "结束控件绘制",
            "itemtype": "method",
            "name": "endDraw",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 465,
            "description": "绘制控件\n在画布上描点",
            "itemtype": "method",
            "name": "draw",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 502,
            "description": "绘制当前控件\n协调控件的绘制，先从其子控件开始绘制，再往上冒。",
            "itemtype": "method",
            "name": "paint",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 547,
            "description": "获取指定事件的集合\n比如mousedown,mouseup等",
            "itemtype": "method",
            "name": "getEvent",
            "params": [
                {
                    "name": "name",
                    "description": "事件名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "事件委托的集合",
                "type": "List"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 559,
            "description": "绑定控件的事件",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "name",
                    "description": "事件名称",
                    "type": "String"
                },
                {
                    "name": "handle",
                    "description": "事件委托",
                    "type": "Function"
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 571,
            "description": "添加事件的集合",
            "itemtype": "method",
            "name": "_setEvent",
            "access": "private",
            "tagname": "",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 587,
            "description": "移除控件的事件",
            "itemtype": "method",
            "name": "unbind",
            "params": [
                {
                    "name": "name",
                    "description": "事件名称",
                    "type": "String"
                },
                {
                    "name": "handle",
                    "description": "从控件中移除事件的委托",
                    "type": "Function"
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 606,
            "description": "独立执行事件委托",
            "itemtype": "method",
            "name": "runEventHandle",
            "params": [
                {
                    "name": "将执行的事件名称",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "事件执行的参数，包括触发事件的对象和位置",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 627,
            "description": "检 查坐标是否落在当前控件区域中..true=在区域内",
            "itemtype": "method",
            "name": "checkPoint",
            "params": [
                {
                    "name": "p",
                    "description": "位置参数",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "当前位置如果在区域内则为true,否则为false。",
                "type": "Boolean"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 649,
            "description": "触发控件事件，组合参数并按控件层级关系执行事件冒泡。",
            "itemtype": "method",
            "name": "raiseEvent",
            "params": [
                {
                    "name": "name",
                    "description": "事件名称",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "事件执行参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "如果事件被组止冒泡则返回false,否则返回true",
                "type": "Boolean"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 727,
            "description": "清空控件指定事件",
            "itemtype": "method",
            "name": "clearEvents",
            "params": [
                {
                    "name": "name",
                    "description": "需要清除的事件名称",
                    "type": "String"
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 740,
            "description": "查找其父级类型为type的元素，直到找到指定的对象或到最顶级控件后返回空。",
            "itemtype": "method",
            "name": "findParent",
            "params": [
                {
                    "name": "类型名称或类型对象",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "指定类型的实例",
                "type": "Object"
            },
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 762,
            "description": "设定是否可以移动\n此方法需指定jmgraph或在控件添加到jmgraph后再调用才能生效。",
            "itemtype": "method",
            "name": "canMove",
            "params": [
                {
                    "name": "m",
                    "description": "true=可以移动，false=不可移动或清除移动。",
                    "type": "Boolean"
                },
                {
                    "name": "graph",
                    "description": "当前画布，如果为空的话必需是已加入画布的控件，否则得指定画布。",
                    "type": "JmGraph",
                    "optional": true
                }
            ],
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 772,
            "description": "控制控件移动对象",
            "itemtype": "property",
            "name": "__mvMonitor",
            "access": "private",
            "tagname": "",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 782,
            "description": "控件移动鼠标事件",
            "itemtype": "method",
            "name": "mv",
            "access": "private",
            "tagname": "",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 824,
            "description": "控件移动鼠标松开事件",
            "itemtype": "method",
            "name": "mu",
            "access": "private",
            "tagname": "",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 839,
            "description": "控件移动鼠标离开事件",
            "itemtype": "method",
            "name": "ml",
            "access": "private",
            "tagname": "",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmControl.js",
            "line": 854,
            "description": "控件移动鼠标按下事件",
            "itemtype": "method",
            "name": "md",
            "access": "private",
            "tagname": "",
            "class": "jmControl",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmEvents.js",
            "line": 10,
            "description": "鼠标事件勾子",
            "itemtype": "property",
            "name": "mouseHandler",
            "type": "{class}",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmEvents.js",
            "line": 18,
            "description": "健盘事件勾子",
            "itemtype": "property",
            "name": "keyHandler",
            "type": "{class}",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmEvents.js",
            "line": 26,
            "description": "鼠标事件处理对象，container 为事件主体，target为响应事件对象",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmEvents.js",
            "line": 119,
            "description": "健盘事件处理对象，container 为事件主体，target为响应事件对象",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmEvents.js",
            "line": 126,
            "description": "检查是否触发健盘事件至画布\n如果触发对象为输入框等对象则不响应事件",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmEvents.js",
            "line": 147,
            "description": "初始化健盘事件",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmModels.js",
            "line": 19,
            "description": "添加渐变色",
            "itemtype": "method",
            "name": "addStop",
            "params": [
                {
                    "name": "offset",
                    "description": "放射渐变颜色偏移,可为百分比参数。",
                    "type": "Number"
                },
                {
                    "name": "color",
                    "description": "当前偏移颜色值",
                    "type": "String"
                }
            ],
            "class": "jmGradient",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmModels.js",
            "line": 35,
            "description": "生成为canvas的渐变对象",
            "itemtype": "method",
            "name": "toGradient",
            "params": [
                {
                    "name": "control",
                    "description": "当前渐变对应的控件",
                    "type": "JmControl"
                }
            ],
            "return": {
                "description": "canvas渐变对象",
                "type": "Gradient"
            },
            "class": "jmGradient",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmModels.js",
            "line": 122,
            "description": "转换为raphael的渐变的字符串表达",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "raphael的渐变的字符串表达",
                "type": "String"
            },
            "class": "jmGradient",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmProperty.js",
            "line": 13,
            "description": "检 查对象是否为指定类型",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "type",
                    "description": "判断的类型",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "true=表示当前对象为指定的类型type,false=表示不是",
                "type": "Boolean"
            },
            "class": "jmObject",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmProperty.js",
            "line": 25,
            "description": "给控件添加动画处理,如果成功执行会导致画布刷新。",
            "itemtype": "method",
            "name": "animate",
            "params": [
                {
                    "name": "handle",
                    "description": "动画委托",
                    "type": "Function"
                },
                {
                    "name": "millisec",
                    "description": "此委托执行间隔 （毫秒）",
                    "type": "Integer"
                }
            ],
            "class": "jmObject",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmProperty.js",
            "line": 106,
            "description": "获取属性值",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "name",
                    "description": "获取属性的名称",
                    "type": "String"
                }
            ],
            "return": {
                "description": "获取属性的值",
                "type": "Any"
            },
            "class": "jmProperty",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmProperty.js",
            "line": 119,
            "description": "设置属性值",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "name",
                    "description": "设置属性的名称",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "设置属性的值",
                    "type": "Any"
                }
            ],
            "retunr": "{any} 当前属性的值",
            "class": "jmProperty",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmProperty.js",
            "line": 138,
            "description": "绑定事件监听",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "name",
                    "description": "监听事件的名称",
                    "type": "String"
                },
                {
                    "name": "handle",
                    "description": "监听委托",
                    "type": "Function"
                }
            ],
            "class": "jmProperty",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmProperty.js",
            "line": 161,
            "description": "执行监听回调",
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "name",
                    "description": "触发事件的名称",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "事件参数数组",
                    "type": "Array"
                }
            ],
            "class": "jmProperty",
            "module": "jmGraph"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 18,
            "description": "生成svg对应的元素",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "元素名称",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "所属控件",
                    "description": "",
                    "type": "Jmcontrol"
                }
            ],
            "return": {
                "description": "元素对象",
                "type": "Element"
            },
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 31,
            "description": "指定或获取画布宽度",
            "itemtype": "method",
            "name": "width",
            "params": [
                {
                    "name": "w",
                    "description": "指定的宽度",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前对象宽度",
                "type": "Number"
            },
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 42,
            "description": "指定或获取画布高度",
            "itemtype": "method",
            "name": "height",
            "params": [
                {
                    "name": "h",
                    "description": "指定的宽度",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前对象宽度",
                "type": "Number"
            },
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 53,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 59,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 65,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 71,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 77,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 83,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 89,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 95,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 101,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 107,
            "description": "兼容处理的空函数",
            "class": "jmSVG",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 138,
            "description": "生成svg对应的元素",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "元素名称",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "元素对象",
                "type": "Element"
            },
            "class": "jmVML",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 188,
            "description": "指定或获取宽度",
            "itemtype": "method",
            "name": "width",
            "params": [
                {
                    "name": "w",
                    "description": "指定的宽度",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前对象宽度",
                "type": "Number"
            },
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 205,
            "description": "指定或获取高度",
            "itemtype": "method",
            "name": "height",
            "params": [
                {
                    "name": "h",
                    "description": "指定的宽度",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前对象宽度",
                "type": "Number"
            },
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 222,
            "description": "根据绑定的对象设置其相关属性",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "target",
                    "description": "绑定到的控件对象",
                    "type": "JmControl"
                }
            ],
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 243,
            "description": "设定当前元素的属性",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "n",
                    "description": "属性名",
                    "type": "String"
                },
                {
                    "name": "v",
                    "description": "属性值",
                    "type": "String"
                }
            ],
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 361,
            "description": "设定元素样式\n如果不指定参数则返回整个样式串，\n指定一个参数字符串则返回此样式对应的值，\n如果指定一个object对象则把它所有属性加到样式中。\n指定二个参数为样式健值",
            "itemtype": "method",
            "name": "css",
            "params": [
                {
                    "name": "k",
                    "description": "样式健或对象",
                    "type": "String/object",
                    "optional": true
                },
                {
                    "name": "v",
                    "description": "样式值",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 417,
            "description": "将当前元素加入到父对象中",
            "itemtype": "method",
            "name": "appendTo",
            "params": [
                {
                    "name": "p",
                    "description": "父容器",
                    "type": "Element"
                }
            ],
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 436,
            "description": "将当前元素从父对象中移除掉",
            "itemtype": "method",
            "name": "remove",
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 445,
            "description": "显示",
            "itemtype": "method",
            "name": "show",
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 454,
            "description": "隐藏",
            "itemtype": "method",
            "name": "hide",
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 463,
            "description": "绑定控件的事件",
            "itemtype": "method",
            "name": "bind",
            "params": [
                {
                    "name": "name",
                    "description": "事件名称",
                    "type": "String"
                },
                {
                    "name": "handle",
                    "description": "事件委托",
                    "type": "Function"
                }
            ],
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmSvg.js",
            "line": 474,
            "description": "移除控件的事件",
            "itemtype": "method",
            "name": "unbind",
            "params": [
                {
                    "name": "name",
                    "description": "事件名称",
                    "type": "String"
                },
                {
                    "name": "handle",
                    "description": "从控件中移除事件的委托",
                    "type": "Function"
                }
            ],
            "class": "jmSVGElement",
            "module": "jmSVG"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 17,
            "description": "继承",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "target",
                    "description": "派生类",
                    "type": "Class"
                },
                {
                    "name": "source",
                    "description": "基类",
                    "type": "Class"
                }
            ],
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 56,
            "description": "复制一个对象",
            "itemtype": "method",
            "name": "clone",
            "params": [
                {
                    "name": "source",
                    "description": "被复制的对象",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "参数source的拷贝对象",
                "type": "Object"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 101,
            "description": "往集合中添加对象",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "obj",
                    "description": "往集合中添加的对象",
                    "type": "Any"
                }
            ],
            "class": "list",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 119,
            "description": "从集合中移除指定对象",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "obj",
                    "description": "将移除的对象",
                    "type": "Any"
                }
            ],
            "class": "list",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 140,
            "description": "按索引移除对象",
            "itemtype": "method",
            "name": "removeAt",
            "params": [
                {
                    "name": "index",
                    "description": "移除对象的索引",
                    "type": "Integer"
                }
            ],
            "class": "list",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 154,
            "description": "判断是否包含某个对象",
            "itemtype": "method",
            "name": "contain",
            "params": [
                {
                    "name": "obj",
                    "description": "判断当前集合中是否包含此对象",
                    "type": "Any"
                }
            ],
            "class": "list",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 175,
            "description": "从集合中获取某个对象",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "index",
                    "description": "如果为整型则表示为获取此索引的对象，如果为function为则通过此委托获取对象",
                    "type": "Integer/function"
                }
            ],
            "return": {
                "description": "集合中的对象",
                "type": "Any"
            },
            "class": "list",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 196,
            "description": "遍历当前集合",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "cb",
                    "description": "遍历当前集合的委托",
                    "type": "Function"
                },
                {
                    "name": "inverse",
                    "description": "是否按逆序遍历",
                    "type": "Boolean"
                }
            ],
            "class": "list",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 221,
            "description": "排序当前集合",
            "itemtype": "method",
            "name": "sort",
            "params": [
                {
                    "name": "cb",
                    "description": "排序委托",
                    "type": "Function"
                }
            ],
            "class": "list",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 232,
            "description": "获取当前集合对象个数",
            "itemtype": "method",
            "name": "count",
            "params": [
                {
                    "name": "handler",
                    "description": "检查对象是否符合计算的条件",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前集合的个数",
                "type": "Integer"
            },
            "class": "list",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 254,
            "description": "清空当前集合",
            "itemtype": "method",
            "name": "clear",
            "class": "list",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 275,
            "description": "当前缓存集合",
            "itemtype": "property",
            "name": "items",
            "type": "{object}",
            "class": "jmUtils.cache",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 283,
            "description": "向缓存中添加对象",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "key",
                    "description": "加入缓存的健值",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "加入缓存的值",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "当前加入的值",
                "type": "Any"
            },
            "class": "jmUtils.cache",
            "module": "jmUtils",
            "namespace": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 296,
            "description": "跟add类似",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "加入缓存的健值",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "加入缓存的值",
                    "type": "Any"
                }
            ],
            "class": "jmUtils.cache",
            "module": "jmUtils",
            "namespace": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 307,
            "description": "从缓存中获取对象",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "获取缓存的健值",
                    "type": "String"
                }
            ],
            "return": {
                "description": "对应健的值",
                "type": "Any"
            },
            "class": "jmUtils.cache",
            "module": "jmUtils",
            "namespace": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 318,
            "description": "从缓存中移除指定健的对象",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "需要移除的缓存健",
                    "type": "String"
                }
            ],
            "class": "jmUtils.cache",
            "module": "jmUtils",
            "namespace": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 330,
            "description": "检查浏览器信息",
            "itemtype": "method",
            "name": "browser",
            "return": {
                "description": "返回浏览器信息,如：msie=true表示为ie浏览器",
                "type": "Object"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 374,
            "description": "检查是否支持的浏览器",
            "itemtype": "method",
            "name": "isSurportedBrowser",
            "return": {
                "description": "true=支持，false=不支持",
                "type": "Boolean"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 385,
            "description": "检查是否支持canvas或svg",
            "itemtype": "method",
            "name": "checkSupportedMode",
            "return": {
                "description": "canvas或svg",
                "type": "String"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 404,
            "description": "判断对象是否为数组",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "被判断的对象",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true=为数组对象，false=当前对象不为数组",
                "type": "Boolean"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 416,
            "description": "加载图片资源",
            "itemtype": "method",
            "name": "loadImg",
            "params": [
                {
                    "name": "src",
                    "description": "图片地址",
                    "type": "String/array"
                },
                {
                    "name": "callback",
                    "description": "图片加载完回调",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 460,
            "description": "加载js文件",
            "itemtype": "method",
            "name": "require",
            "params": [
                {
                    "name": "js",
                    "description": "需要加载的JS的路径",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "回调函数callback为成功或失败后回调",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 528,
            "description": "绑定事件到html对象",
            "itemtype": "method",
            "name": "bindEvent",
            "params": [
                {
                    "name": "html元素对象",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "name",
                    "description": "事件名称",
                    "type": "String"
                },
                {
                    "name": "fun",
                    "description": "事件委托",
                    "type": "Function"
                }
            ],
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 550,
            "description": "从对象中移除事件到",
            "itemtype": "method",
            "name": "removeEvent",
            "params": [
                {
                    "name": "html元素对象",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "name",
                    "description": "事件名称",
                    "type": "String"
                },
                {
                    "name": "fun",
                    "description": "事件委托",
                    "type": "Function"
                }
            ],
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 572,
            "description": "获取元素的绝对定位",
            "itemtype": "method",
            "name": "getElementPosition",
            "params": [
                {
                    "name": "el",
                    "description": "目标元素对象",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "位置对象(top,left)",
                "type": "Position"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 605,
            "description": "获取元素事件触发的位置",
            "itemtype": "method",
            "name": "getEventPosition",
            "params": [
                {
                    "name": "evt",
                    "description": "当前触发事件的参数",
                    "type": "EventArg"
                },
                {
                    "name": "scale",
                    "description": "当前画布的缩放比例",
                    "type": "Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "事件触发的位置",
                "type": "Point"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 652,
            "description": "检 查对象是否为指定的类型,不包括继承",
            "itemtype": "method",
            "name": "isType",
            "params": [
                {
                    "name": "target",
                    "description": "需要判断类型的对象",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "对象类型",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "返回对象是否为指定类型",
                "type": "Boolean"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 671,
            "description": "判断点是否在多边形内\n如果一个点在多边形内部，任意角度做射线肯定会与多边形要么有一个交点，要么有与多边形边界线重叠。\n如果一个点在多边形外部，任意角度做射线要么与多边形有一个交点，要么有两个交点，要么没有交点，要么有与多边形边界线重叠。\n利用上面的结论，我们只要判断这个点与多边形的交点个数，就可以判断出点与多边形的位置关系了。",
            "itemtype": "method",
            "name": "pointInPolygon",
            "params": [
                {
                    "name": "pt",
                    "description": "坐标对象",
                    "type": "Point"
                },
                {
                    "name": "polygon",
                    "description": "多边型角坐标对象数组",
                    "type": "Array"
                },
                {
                    "name": "offset",
                    "description": "判断可偏移值",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "0= 不在图形内和线上，1=在边上，2=在图形内部",
                "type": "Integer"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 788,
            "description": "检查边界，子对象是否超出父容器边界\n当对象偏移offset后是否出界\n返回(left:0,right:0,top:0,bottom:0)\n如果right>0表示右边出界right偏移量,left<0则表示左边出界left偏移量\n如果bottom>0表示下边出界bottom偏移量,top<0则表示上边出界ltop偏移量",
            "itemtype": "method",
            "name": "checkOutSide",
            "params": [
                {
                    "name": "parentBounds",
                    "description": "父对象的边界",
                    "type": "Bound"
                },
                {
                    "name": "targetBounds",
                    "description": "对象的边界",
                    "type": "Bound"
                },
                {
                    "name": "offset",
                    "description": "判断是否越界可容偏差",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "越界标识",
                "type": "Bound"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 820,
            "description": "通过时间生成唯 一ID",
            "itemtype": "method",
            "name": "guid",
            "return": {
                "description": "唯一字符串",
                "type": "String"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 832,
            "description": "去除字符串开始字符",
            "itemtype": "method",
            "name": "trimStart",
            "params": [
                {
                    "name": "source",
                    "description": "需要处理的字符串",
                    "type": "String"
                },
                {
                    "name": "c",
                    "description": "要去除字符串的前置字符",
                    "type": "Char",
                    "optional": true
                }
            ],
            "return": {
                "description": "去除前置字符后的字符串",
                "type": "String"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 853,
            "description": "去除字符串结束的字符c",
            "itemtype": "method",
            "name": "trimEnd",
            "params": [
                {
                    "name": "source",
                    "description": "需要处理的字符串",
                    "type": "String"
                },
                {
                    "name": "c",
                    "description": "要去除字符串的后置字符",
                    "type": "Char",
                    "optional": true
                }
            ],
            "return": {
                "description": "去除后置字符后的字符串",
                "type": "String"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 874,
            "description": "去除字符串开始与结束的字符",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "source",
                    "description": "需要处理的字符串",
                    "type": "String"
                },
                {
                    "name": "c",
                    "description": "要去除字符串的字符",
                    "type": "Char",
                    "optional": true
                }
            ],
            "return": {
                "description": "去除字符后的字符串",
                "type": "String"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 887,
            "description": "检查是否为百分比参数",
            "itemtype": "method",
            "name": "checkPercent",
            "params": [
                {
                    "name": "字符串参数",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true=当前字符串为百分比参数,false=不是",
                "type": "Boolean"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 904,
            "description": "转换百分数为数值类型",
            "itemtype": "method",
            "name": "percentToNumber",
            "params": [
                {
                    "name": "per",
                    "description": "把百分比转为数值的参数",
                    "type": "String"
                }
            ],
            "return": {
                "description": "百分比对应的数值",
                "type": "Number"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 923,
            "description": "解析XML字符串",
            "itemtype": "method",
            "name": "parseXML",
            "params": [
                {
                    "name": "xml",
                    "description": "xml字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "把字符串转为的xml对象",
                "type": "XmlDocument"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 948,
            "description": "解析XML文档为json对象",
            "itemtype": "method",
            "name": "xmlToJSON",
            "params": [
                {
                    "name": "xml",
                    "description": "待转为xml对象的xml字符串",
                    "type": "String"
                }
            ],
            "return": {
                "description": "xml对象转为的json对象",
                "type": "Object"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "common\\jmUtils.js",
            "line": 961,
            "description": "解析节点",
            "itemtype": "method",
            "name": "turnChildren",
            "params": [
                {
                    "name": "xmlnode",
                    "description": "xml对象节点",
                    "type": "XmlNode"
                },
                {
                    "name": "parent",
                    "description": "当前对象的父节点",
                    "type": "XmlNode"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "当前节点对应的json对象"
            },
            "class": "jmUtils",
            "module": "jmUtils"
        },
        {
            "file": "controls\\jmArrawLine.js",
            "line": 32,
            "description": "初始化直线和箭头描点",
            "itemtype": "method",
            "name": "initPoints",
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmImage.js",
            "line": 33,
            "description": "重写控件绘制\n根据父边界偏移和此控件参数绘制图片",
            "itemtype": "method",
            "name": "draw",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmImage.js",
            "line": 81,
            "description": "获取当前控件的边界",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "边界对象(left,top,right,bottom,width,height)",
                "type": "Object"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmImage.js",
            "line": 102,
            "description": "设定要绘制的图像或其它多媒体对象",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "img",
                    "description": "图片路径或图片控件对象",
                    "type": "String/img",
                    "optional": true
                }
            ],
            "return": {
                "description": "图片对象",
                "type": "Img"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmImage.js",
            "line": 118,
            "description": "画图的起始位置",
            "itemtype": "method",
            "name": "position",
            "params": [
                {
                    "name": "p",
                    "description": "图片绘制的位置",
                    "type": "Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前图片位置",
                "type": "Point"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmImage.js",
            "line": 129,
            "description": "画图开始剪切位置",
            "itemtype": "method",
            "name": "sourcePosition",
            "params": [
                {
                    "name": "p",
                    "description": "目标图片截取的位置",
                    "type": "Point",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前截取位置",
                "type": "Point"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmImage.js",
            "line": 140,
            "description": "被剪切宽度",
            "itemtype": "method",
            "name": "sourceWidth",
            "params": [
                {
                    "name": "w",
                    "description": "图片剪切宽度",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "剪切宽度",
                "type": "Number"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmImage.js",
            "line": 151,
            "description": "被剪切高度",
            "itemtype": "method",
            "name": "sourceHeight",
            "params": [
                {
                    "name": "h",
                    "description": "图片剪切高度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前被剪切高度",
                "type": "Number"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmLabel.js",
            "line": 37,
            "description": "初始化图形点,主要用于限定控件边界。",
            "itemtype": "method",
            "name": "initPoints",
            "return": {
                "description": "所有边界点数组",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmLabel.js",
            "line": 56,
            "description": "根据位置偏移画字符串",
            "itemtype": "method",
            "name": "draw",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmResize.js",
            "line": 15,
            "description": "当前对象类型名jmResize",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmResize.js",
            "line": 39,
            "description": "初始化控件的8个拉伸方框",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmResize.js",
            "line": 73,
            "description": "绑定周边拉伸的小方块事件",
            "itemtype": "method",
            "name": "bindRectEvents",
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmResize.js",
            "line": 135,
            "description": "按移动偏移量重置当前对象，并触发大小和位置改变事件",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "px",
                    "description": "位置X轴偏移",
                    "type": "Number"
                },
                {
                    "name": "py",
                    "description": "位置y轴偏移",
                    "type": "Number"
                },
                {
                    "name": "dx",
                    "description": "大小x轴偏移",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "大小y轴偏移",
                    "type": "Number"
                }
            ],
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmResize.js",
            "line": 211,
            "description": "拉伸小方块边长",
            "itemtype": "method",
            "name": "rectSize",
            "params": [
                {
                    "name": "s",
                    "description": "边长",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前边长",
                "type": "Number"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "controls\\jmResize.js",
            "line": 222,
            "description": "控制的目标控件",
            "itemtype": "method",
            "name": "target",
            "params": [
                {
                    "name": "target",
                    "description": "边长",
                    "type": "JmControl"
                }
            ],
            "return": {
                "description": "控制的目标控件",
                "type": "JmControl"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 39,
            "description": "当前元素是否已被选择",
            "itemtype": "property",
            "name": "selected",
            "type": "boolean",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 69,
            "description": "初始化当前元素样式",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "style",
                    "description": "样式",
                    "type": "Object"
                }
            ],
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 103,
            "description": "生成节点元素\n并生成基础子控件,包括图形，边界，拖放标识和连线等",
            "itemtype": "method",
            "name": "create",
            "access": "private",
            "tagname": "",
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 190,
            "description": "添加当前元素到画布中",
            "itemtype": "method",
            "name": "add",
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 292,
            "description": "设置一个标识\n例如用来做状态标识等",
            "itemtype": "method",
            "name": "setOverlay",
            "params": [
                {
                    "name": "src",
                    "description": "图片地址",
                    "type": "String"
                },
                {
                    "name": "w",
                    "description": "图片宽",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "图片高度",
                    "type": "Nubmer"
                },
                {
                    "name": "tooltip",
                    "description": "标识信息描述",
                    "type": "String"
                }
            ],
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 344,
            "description": "大小改变事件\n重置各元素大小和位置",
            "itemtype": "method",
            "name": "resize",
            "access": "private",
            "tagname": "",
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 376,
            "description": "重新初始化各位置",
            "itemtype": "method",
            "name": "initPosition",
            "access": "private",
            "tagname": "",
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 433,
            "description": "选择当前节点",
            "itemtype": "method",
            "name": "select",
            "params": [
                {
                    "name": "b",
                    "description": "选择或消选当前元素",
                    "type": "Boolean"
                },
                {
                    "name": "raiseEvent",
                    "description": "是否触发选择事件",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "是否被选择",
                "type": "Boolean"
            },
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 464,
            "description": "连接到目标节点",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "to",
                    "description": "要连接到的元素",
                    "type": "JmCell"
                },
                {
                    "name": "id",
                    "description": "指定当前连线的id",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "当前连线显示的字符值",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 530,
            "description": "返回或设置当前元素的值",
            "itemtype": "method",
            "name": "value",
            "params": [
                {
                    "name": "v",
                    "description": "元素显示的值",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前的值",
                "type": "String"
            },
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 548,
            "description": "设定或获取中心点",
            "itemtype": "method",
            "name": "center",
            "params": [
                {
                    "name": "p",
                    "description": "中心点坐标",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "当前中心点坐标",
                "type": "Point"
            },
            "class": "jmHArc",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 560,
            "description": "从编辑器中移除当前节点",
            "itemtype": "method",
            "name": "remove",
            "class": "jmCell",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 632,
            "description": "当前是否为选中状态",
            "itemtype": "property",
            "name": "selected",
            "class": "jmConnectLine",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 644,
            "description": "初始化图形点,通过元素出口和入口计算最佳连线路径",
            "itemtype": "method",
            "name": "initPoints",
            "return": {
                "description": "所有描点集合",
                "type": "Array"
            },
            "class": "jmConnectLine",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 708,
            "description": "给定开始点与结束点，计算连线路径",
            "itemtype": "method",
            "name": "getPoints",
            "access": "private",
            "tagname": "",
            "class": "jmConnectLine",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 868,
            "description": "选择当前连线",
            "itemtype": "method",
            "name": "value",
            "return": {
                "description": "当前连线的值",
                "type": "String"
            },
            "class": "jmConnectLine",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 898,
            "description": "当前连线标签值",
            "itemtype": "method",
            "name": "value",
            "return": {
                "description": "当前连线的值",
                "type": "String"
            },
            "class": "jmConnectLine",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmCell.js",
            "line": 910,
            "description": "移除当前连线",
            "itemtype": "method",
            "name": "remove",
            "class": "jmConnectLine",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 11,
            "description": "拖放连线的样式",
            "itemtype": "property",
            "name": "dragLine",
            "type": "object",
            "class": "jmEditorDefaultStyle",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 25,
            "description": "单元边框样式",
            "itemtype": "property",
            "name": "cellBorder",
            "type": "object",
            "class": "jmEditorDefaultStyle",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 35,
            "description": "连线样式",
            "itemtype": "property",
            "name": "connectLine",
            "type": "object",
            "class": "jmEditorDefaultStyle",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 47,
            "description": "编辑器字符样式",
            "itemtype": "property",
            "name": "font",
            "type": "object",
            "class": "jmEditorDefaultStyle",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 61,
            "description": "选择元素边框样式",
            "itemtype": "property",
            "name": "selectRect",
            "type": "object",
            "class": "jmEditorDefaultStyle",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 90,
            "description": "当前画布所有节点元素",
            "itemtype": "property",
            "name": "cells",
            "type": "list",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 99,
            "description": "当前画布所有连线集合",
            "itemtype": "property",
            "name": "connects",
            "type": "list",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 108,
            "description": "当前所有样式集合",
            "itemtype": "property",
            "name": "styles",
            "type": "object",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 117,
            "description": "当前类型标识",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 128,
            "description": "是否可连线",
            "itemtype": "property",
            "name": "connectable",
            "type": "boolean",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 136,
            "description": "是否移动节点",
            "itemtype": "property",
            "name": "movable",
            "type": "boolean",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 178,
            "description": "编辑器的右健菜单\n可直接对返回的对象执行操作",
            "itemtype": "method",
            "name": "menus",
            "return": {
                "description": "菜单主体对象",
                "type": "Object"
            },
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 196,
            "description": "显示当前菜单",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "x",
                    "description": "菜单显示位置的X坐标",
                    "type": "Nubmer",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "菜单显示位置的Y坐标",
                    "type": "Nubmer",
                    "optional": true
                }
            ],
            "return": {
                "description": "当前菜单对象",
                "type": "Object"
            },
            "class": "menus",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 220,
            "description": "向菜单中添加项",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "item",
                    "description": "菜单项，可以是字符串或html元素",
                    "type": "Element/string"
                },
                {
                    "name": "click",
                    "description": "当前菜单项单击事件委托",
                    "type": "Function"
                }
            ],
            "class": "menus",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 257,
            "description": "添加元素节点,并监听其选择事件",
            "itemtype": "method",
            "name": "addCell",
            "params": [
                {
                    "name": "option",
                    "description": "元素参数，主要为jmcell的参数",
                    "type": "Object"
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 303,
            "description": "获取当前流程中最大ID, 并自加1",
            "itemtype": "method",
            "name": "maxId",
            "return": {
                "description": "当前编辑器中的最大ID加1",
                "type": "Integer"
            },
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 321,
            "description": "当前是否可编辑",
            "itemtype": "method",
            "name": "isEnabled",
            "return": {
                "description": "当前编辑器可否编辑",
                "type": "Boolean"
            },
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 335,
            "description": "初始化编辑器的基础事件",
            "itemtype": "method",
            "name": "initEvents",
            "access": "private",
            "tagname": "",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 448,
            "description": "绑定当前编辑器按健事件",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 524,
            "description": "选择所有元素",
            "itemtype": "method",
            "name": "selectAll",
            "params": [
                {
                    "name": "true=选择所有元素，false=取消所有元素的选择",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "选择或消选所排除的id",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 544,
            "description": "通过id获取元素",
            "itemtype": "method",
            "name": "getCell",
            "params": [
                {
                    "name": "id",
                    "description": "需要获取的元素id",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "元素对象",
                "type": "JmCell"
            },
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 558,
            "description": "获取所有元素的数组",
            "itemtype": "method",
            "name": "getCells",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 568,
            "description": "获取当前已选中的节点",
            "itemtype": "method",
            "name": "getSelectedCells",
            "return": {
                "description": "所有已选择的元素数组",
                "type": "Array"
            },
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 585,
            "description": "获取当前已选中的连线",
            "itemtype": "method",
            "name": "getSelectedConnects",
            "return": {
                "description": "所有已选择的元素数组",
                "type": "Array"
            },
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 602,
            "description": "移动指定的节点",
            "itemtype": "method",
            "name": "moveCells",
            "params": [
                {
                    "name": "cells",
                    "description": "需要移动的节点数组",
                    "type": "Array"
                },
                {
                    "name": "dx",
                    "description": "移动的X偏移量",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "移动的Y偏移量",
                    "type": "Number"
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 622,
            "description": "移除元素",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "需要移除的元素集合或指定的某个元素",
                    "description": "",
                    "type": "Array/jmCell"
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 641,
            "description": "清除所有画布上的对象",
            "itemtype": "method",
            "name": "clear",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 651,
            "description": "初始化组件添加对象",
            "itemtype": "method",
            "name": "regComponent",
            "params": [
                {
                    "name": "el",
                    "description": "组件小图标",
                    "type": "String"
                },
                {
                    "name": "option",
                    "description": "组件参数",
                    "type": "Object"
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 720,
            "description": "保存样式信息，可供后面直接通过样式名称设定，\n简单重复使用。",
            "itemtype": "method",
            "name": "regStyle",
            "params": [
                {
                    "name": "name",
                    "description": "样式指定名称",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "样式对象",
                    "type": "Object"
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 733,
            "description": "保存当前画布状态\n把当前画布对象转为json对象保存",
            "itemtype": "method",
            "name": "save",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 756,
            "description": "撤消当前操作",
            "itemtype": "method",
            "name": "undo",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 775,
            "description": "恢复操作",
            "itemtype": "method",
            "name": "redo",
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 794,
            "description": "排列已选元素",
            "itemtype": "method",
            "name": "align",
            "params": [
                {
                    "name": "排列方式,top=顶端对齐,bottom=底端对齐,middle=垂直居中,left=左对齐,right=右对齐,center=水平居中",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 864,
            "description": "根据最新元素重新计算画布大小\n如果没有指定元素，则循环所有元素计算大小",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "cell",
                    "description": "是影响大小的元素",
                    "type": "JmCell",
                    "optional": true
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 897,
            "description": "对画布执行基本命令",
            "itemtype": "method",
            "name": "execute",
            "params": [
                {
                    "name": "cmd",
                    "description": "要执行的名称",
                    "type": "String"
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 929,
            "description": "转为图片信息",
            "itemtype": "method",
            "name": "toImage",
            "return": {
                "description": "当前画布的base64字符串",
                "type": "String"
            },
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 940,
            "description": "转为json对象\n画布完整json描述",
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "当前描述json",
                "type": "Object"
            },
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "editor\\jmEditor.js",
            "line": 978,
            "description": "从json中恢复图\n根据json描述恢复原图",
            "itemtype": "method",
            "name": "fromJSON",
            "params": [
                {
                    "name": "json",
                    "description": "描述json",
                    "type": "String/object"
                },
                {
                    "name": "s",
                    "description": "当前恢复是否记录状态 true表示记录，false不记录",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "jmEditor",
            "module": "jmEditor"
        },
        {
            "file": "lib\\excanvas.js",
            "line": 51,
            "description": "This funtion is assigned to the <canvas> elements as element.getContext().",
            "this": "{HTMLElement}",
            "return": {
                "description": "",
                "type": "CanvasRenderingContext2D_"
            },
            "class": "jmArc",
            "module": "jmEditor"
        },
        {
            "file": "lib\\excanvas.js",
            "line": 63,
            "description": "Binds a function to an object. The returned function will always use the\npassed in {@code obj} as {@code this}.\n\nExample:\n\n  g = bind(f, obj, a, b)\n  g(c, d) // will do f.call(obj, a, b, c, d)",
            "params": [
                {
                    "name": "f",
                    "description": "The function to bind the object to",
                    "type": "Function"
                },
                {
                    "name": "obj",
                    "description": "The object that should act as this when the function\n    is called",
                    "type": "Object"
                },
                {
                    "name": "var_args",
                    "description": "Rest arguments that will be used as the initial\n    arguments when the function is called",
                    "type": "*"
                }
            ],
            "return": {
                "description": "A new function that has bound this",
                "type": "Function"
            },
            "class": "jmArc",
            "module": "jmEditor"
        },
        {
            "file": "lib\\excanvas.js",
            "line": 128,
            "description": "Public initializes a canvas element so that it can be used as canvas\nelement from now on. This is called automatically before the page is\nloaded but if you are creating elements using createElement you need to\nmake sure this is called on the element.",
            "params": [
                {
                    "name": "el",
                    "description": "The canvas element to initialize.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "the element that was created.",
                "type": "HTMLElement"
            },
            "class": "jmArc",
            "module": "jmEditor"
        },
        {
            "file": "lib\\excanvas.js",
            "line": 282,
            "description": "This class implements CanvasRenderingContext2D interface as described by\nthe WHATWG.",
            "params": [
                {
                    "name": "surfaceElement",
                    "description": "The element that the 2D context should\nbe associated with",
                    "type": "HTMLElement"
                }
            ],
            "class": "jmArc",
            "module": "jmEditor"
        },
        {
            "file": "lib\\excanvas.js",
            "line": 776,
            "access": "private",
            "tagname": "",
            "class": "jmArc",
            "module": "jmEditor"
        },
        {
            "file": "lib\\excanvas.js",
            "line": 842,
            "class": "jmArc",
            "module": "jmEditor"
        },
        {
            "file": "shapes\\jmArc.js",
            "line": 18,
            "description": "当前对象类型名",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArc.js",
            "line": 48,
            "description": "初始化图形点",
            "itemtype": "method",
            "name": "initPoint",
            "access": "private",
            "tagname": "",
            "class": "jmArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArc.js",
            "line": 98,
            "description": "设定或获取中心点",
            "itemtype": "method",
            "name": "center",
            "params": [
                {
                    "name": "p",
                    "description": "中心参数",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "当前中心点",
                "type": "Point"
            },
            "class": "jmArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArc.js",
            "line": 110,
            "description": "设定或获取半径",
            "itemtype": "method",
            "name": "radius",
            "params": [
                {
                    "name": "r",
                    "description": "半径",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前半径",
                "type": "Number"
            },
            "class": "jmArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArc.js",
            "line": 122,
            "description": "设定或获取起始角度",
            "itemtype": "method",
            "name": "startAngle",
            "params": [
                {
                    "name": "r",
                    "description": "角度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前起始角度",
                "type": "Number"
            },
            "class": "jmArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArc.js",
            "line": 134,
            "description": "设定或获取结束角度",
            "itemtype": "method",
            "name": "endAngle",
            "params": [
                {
                    "name": "r",
                    "description": "角度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前结束角度",
                "type": "Number"
            },
            "class": "jmArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArc.js",
            "line": 146,
            "description": "设定或获取是否顺时针画",
            "itemtype": "method",
            "name": "anticlockwise",
            "params": [
                {
                    "name": "a",
                    "description": "true=顺时针,false=逆时针",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "当前是否为顺时针",
                "type": "Boolean"
            },
            "class": "jmArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArraw.js",
            "line": 17,
            "description": "当前对象类型名",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArraw.js",
            "line": 39,
            "description": "初始化图形点",
            "itemtype": "method",
            "name": "initPoint",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "solid",
                    "description": "是否为实心的箭头",
                    "type": "Boolean"
                }
            ],
            "class": "jmArraw",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArraw.js",
            "line": 94,
            "description": "控制起始点",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "p",
                    "description": "起始点",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "起始点",
                "type": "Point"
            },
            "class": "jmArraw",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArraw.js",
            "line": 106,
            "description": "控制结束点",
            "itemtype": "method",
            "name": "end",
            "params": [
                {
                    "name": "p",
                    "description": "结束点",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "结束点",
                "type": "Point"
            },
            "class": "jmArraw",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArraw.js",
            "line": 118,
            "description": "箭头角度",
            "itemtype": "method",
            "name": "angle",
            "params": [
                {
                    "name": "r",
                    "description": "箭头角度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "箭头角度",
                "type": "Number"
            },
            "class": "jmArraw",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArraw.js",
            "line": 130,
            "description": "箭头X偏移量",
            "itemtype": "method",
            "name": "offsetX",
            "params": [
                {
                    "name": "p",
                    "description": "箭头X偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "箭头X偏移量",
                "type": "Number"
            },
            "class": "jmArraw",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmArraw.js",
            "line": 141,
            "description": "箭头Y偏移量",
            "itemtype": "method",
            "name": "offsetY",
            "params": [
                {
                    "name": "p",
                    "description": "箭头Y偏移量",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "箭头Y偏移量",
                "type": "Number"
            },
            "class": "jmArraw",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmBezier.js",
            "line": 15,
            "description": "当前对象类型名",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmBezier.js",
            "line": 33,
            "description": "初始化图形点",
            "itemtype": "method",
            "name": "initPoints",
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmBezier.js",
            "line": 64,
            "description": "根据控制点和参数t生成贝塞尔曲线轨迹点",
            "itemtype": "method",
            "name": "getPoint",
            "params": [
                {
                    "name": "ps",
                    "description": "控制点集合",
                    "type": "Array"
                },
                {
                    "name": "t",
                    "description": "参数(0-1)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "所有轨迹点的数组",
                "type": "Array"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmBezier.js",
            "line": 90,
            "description": "对控件进行平移\n遍历控件所有描点或位置，设置其偏移量。",
            "itemtype": "method",
            "name": "offset",
            "params": [
                {
                    "name": "x",
                    "description": "x轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y轴偏移量",
                    "type": "Number"
                },
                {
                    "name": "trans",
                    "description": "是否传递,监听者可以通过此属性是否决定是否响应移动事件,默认=true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmBezier.js",
            "line": 115,
            "description": "获取当前控件的边界\n\njmBezier.prototype.getBounds = function() {\n\tthis.initPoints();\n\treturn this.base.getBounds.call(this);",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmBezier.js",
            "line": 123,
            "description": "控制点",
            "itemtype": "method",
            "name": "cpoints",
            "params": [
                {
                    "name": "p",
                    "description": "所有控制点",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "当前控制点集合",
                "type": "Array"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmCircle.js",
            "line": 14,
            "description": "当前对象类型名jmCircle",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmCircle.js",
            "line": 39,
            "description": "初始化图形点",
            "itemtype": "method",
            "name": "initPoint",
            "access": "private",
            "tagname": "",
            "class": "jmCircle",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmCircle.js",
            "line": 75,
            "description": "重写基类画图，此处为画一个完整的圆",
            "itemtype": "method",
            "name": "draw",
            "class": "jmCircle",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmCircle.js",
            "line": 105,
            "description": "获取当前控件的边界\n\njmCircle.prototype.getBounds = function() {\n\tthis.initPoints();\n\treturn this.base.getBounds.call(this);",
            "class": "jmCircle",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmCircle.js",
            "line": 113,
            "description": "设定或获取中心点",
            "itemtype": "method",
            "name": "center",
            "params": [
                {
                    "name": "p",
                    "description": "中心参数",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "当前中心点",
                "type": "Point"
            },
            "class": "jmCircle",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmCircle.js",
            "line": 125,
            "description": "设定或获取半径",
            "itemtype": "method",
            "name": "radius",
            "params": [
                {
                    "name": "p",
                    "description": "半径",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前半径",
                "type": "Number"
            },
            "class": "jmCircle",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmHArc.js",
            "line": 14,
            "description": "当前对象类型名jmHarc",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmHArc.js",
            "line": 44,
            "description": "初始化图形点",
            "itemtype": "method",
            "name": "initPoints",
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmHArc.js",
            "line": 85,
            "description": "获取当前控件的边界\n\njmHArc.prototype.getBounds = function() {\n\tthis.initPoints();\n\treturn this.base.getBounds.call(this);",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmHArc.js",
            "line": 93,
            "description": "设定或获取中心点",
            "itemtype": "method",
            "name": "center",
            "params": [
                {
                    "name": "p",
                    "description": "中心点坐标",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "当前中心点坐标",
                "type": "Point"
            },
            "class": "jmHArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmHArc.js",
            "line": 105,
            "description": "设定或获取内空心圆半径",
            "itemtype": "method",
            "name": "minRadius",
            "params": [
                {
                    "name": "r",
                    "description": "内空心圆半径",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前内空心圆半径",
                "type": "Number"
            },
            "class": "jmHArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmHArc.js",
            "line": 117,
            "description": "设定或获取外空心圆半径",
            "itemtype": "method",
            "name": "maxRadius",
            "params": [
                {
                    "name": "r",
                    "description": "外空心圆半径",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前外空心圆半径",
                "type": "Number"
            },
            "class": "jmHArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmHArc.js",
            "line": 129,
            "description": "设定或获取起始角度",
            "itemtype": "method",
            "name": "startAngle",
            "params": [
                {
                    "name": "a",
                    "description": "起始角度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前起始角度",
                "type": "Number"
            },
            "class": "jmHArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmHArc.js",
            "line": 141,
            "description": "设定或获取结束角度",
            "itemtype": "method",
            "name": "endAngle",
            "params": [
                {
                    "name": "a",
                    "description": "结束角度",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前结束角度",
                "type": "Number"
            },
            "class": "jmHArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmHArc.js",
            "line": 153,
            "description": "设定或获取是否顺时针画",
            "itemtype": "method",
            "name": "anticlockwise",
            "params": [
                {
                    "name": "a",
                    "description": "是否顺时针画",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前是否顺时针画",
                "type": "Number"
            },
            "class": "jmHArc",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmLine.js",
            "line": 14,
            "description": "当前对象类型名jmLine",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmLine.js",
            "line": 39,
            "description": "初始化图形点,如呆为虚线则根据跳跃间隔描点",
            "itemtype": "method",
            "name": "initPoints",
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmLine.js",
            "line": 74,
            "description": "开始画图\n//*\njmLine.prototype.draw = function() {\t\n\t\n\t//获取当前控件的绝对位置\n\tvar bounds = this.parent && this.parent.absoluteBounds?this.parent.absoluteBounds:this.absoluteBounds;\n\tvar startx = this.start.x + bounds.left;\n\tvar starty = this.start.y + bounds.top;\n\tthis.context.moveTo(startx,starty);\n\t\n\tif(this.style.lineType === 'dotted') {\t\t\t\n\t\tvar dx = this.end.x - this.start.x;\n\t\tvar dy = this.end.y - this.start.y;\n\t\tvar lineLen = Math.sqrt(dx * dx + dy * dy);\n\t\tdx = dx / lineLen;\n\t\tdy = dy / lineLen;\n\t\tvar dottedstart = false;\n\t\tvar dottedsp = this.style.dashLength / 2;\n\t\tfor(var l=this.style.dashLength; l<=lineLen;) {\n\t\t\tif(dottedstart == false) {\n\t\t\t\tthis.context.lineTo(startx + dx * l,starty+ dy * l);\n\t\t\t\tl += dottedsp;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.context.moveTo(startx + dx * l,starty+ dy * l);\n\t\t\t\tl += this.style.dashLength;\n\t\t\t}\n\t\t\tdottedstart = !dottedstart;\t\t\t\t\n\t\t}\n\t\tthis.context.lineTo(this.end.x+ bounds.left,this.end.y + bounds.top);\t\t\n\t}\n\telse {\t\t\t\n\t\tthis.context.lineTo(this.end.x+ bounds.left,this.end.y + bounds.top);\n\t}",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmLine.js",
            "line": 112,
            "description": "控制起始点",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "p",
                    "description": "起始点坐标",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "当前起始点坐标",
                "type": "Point"
            },
            "class": "jmLine",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmLine.js",
            "line": 124,
            "description": "控制结束点",
            "itemtype": "method",
            "name": "end",
            "params": [
                {
                    "name": "p",
                    "description": "结束点坐标",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "当前结束点坐标",
                "type": "Point"
            },
            "class": "jmLine",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmPath.js",
            "line": 14,
            "description": "当前对象类型名jmPath",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmPath.js",
            "line": 31,
            "description": "重写检查坐标是否在区域内\n支持任意多边形\n根据边界检查某个点是否在区域内，如果样式有fill，则只要在内有效，如果只有stroke则在边框上有效",
            "itemtype": "method",
            "name": "checkPoint",
            "params": [
                {
                    "name": "p",
                    "description": "待检查的坐标",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "如果在则返回true,否则返回false",
                "type": "Boolean"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmPrismatic.js",
            "line": 14,
            "description": "当前对象类型名jmPrismatic",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmPrismatic.js",
            "line": 38,
            "description": "初始化图形点\n计算棱形顶点",
            "itemtype": "method",
            "name": "initPoints",
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmPrismatic.js",
            "line": 62,
            "description": "设定或获取宽度",
            "itemtype": "method",
            "name": "center",
            "params": [
                {
                    "name": "p",
                    "description": "图形中心点",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "当前中心坐标",
                "type": "Point"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmRect.js",
            "line": 14,
            "description": "当前对象类型名jmRect",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmRect.js",
            "line": 38,
            "description": "获取当前控件的边界",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "当前控件边界",
                "type": "Bound"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmRect.js",
            "line": 57,
            "description": "初始化图形点\n如果有边角弧度则类型圆绝计算其描点",
            "itemtype": "method",
            "name": "initPoints",
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmRect.js",
            "line": 110,
            "description": "开始矩形\n//*\njmRect.prototype.draw = function() {\n\tvar p = this.position();\t\n\tif(p) {\n\t\t//获取当前控件的绝对位置\n\t\t//var bounds = this.parent && this.parent.absoluteBounds?this.parent.absoluteBounds:this.absoluteBounds;\n\t\t\n\t\tvar w = this.width();\n\t\tvar h = this.height();\n\t\tvar p2 = {x:p.x + w,y:p.y};\n\t\tvar p3 = {x:p.x + w,y:p.y + h};\n\t\tvar p4 = {x:p.x,y:p.y + h};\n\t\tthis.points = [];\n\t\tthis.points.push(p);\n\t\tthis.points.push(p2);\n\t\tthis.points.push(p3);\n\t\tthis.points.push(p4);\n\t\t//this.points.push(p1);\n\n\t\tthis.context.moveTo(p.x,p.y );\t\t\n\t\tthis.context.lineTo(p2.x,p2.y);\n\t\tthis.context.lineTo(p3.x,p3.y);\n\t\tthis.context.lineTo(p4.x,p4.y);\n\t\t//this.context.lineTo(p1.x,p1.y);\n\t}",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmRect.js",
            "line": 139,
            "description": "圆角半径",
            "itemtype": "method",
            "name": "radius",
            "params": [
                {
                    "name": "r",
                    "description": "边角圆弧半径",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "当前圆角半径",
                "type": "Number"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmShape.js",
            "line": 11,
            "description": "当前对象类型名 jmShape",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "shapes\\jmShape.js",
            "line": 19,
            "description": "当前画布",
            "itemtype": "property",
            "name": "type",
            "type": "jmGraph",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 20,
            "description": "当前支持的画图类型 svg/canvas",
            "itemtype": "property",
            "name": "mode",
            "type": "{string}",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 73,
            "description": "注册图形类型,图形类型必需有统一的构造函数。参数为画布句柄和参数对象。",
            "itemtype": "method",
            "name": "registerShape",
            "params": [
                {
                    "name": "name",
                    "description": "控件图形名称",
                    "type": "String"
                },
                {
                    "name": "shape",
                    "description": "图形控件类型",
                    "type": "Class"
                }
            ],
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 86,
            "description": "从已注册的图形类创建图形\n简单直观创建对象",
            "itemtype": "method",
            "name": "createShape",
            "params": [
                {
                    "name": "name",
                    "description": "注册控件的名称",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "实例化控件的参数",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "已实例化控件的对象",
                "type": "Object"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 105,
            "description": "初始化默认图形",
            "itemtype": "method",
            "name": "initShapes",
            "access": "private",
            "tagname": "",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 135,
            "description": "检查是否支持的浏览器",
            "itemtype": "method",
            "name": "isSurportedBrowser",
            "return": {
                "description": "true=支持，false=不支持",
                "type": "Boolean"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 145,
            "description": "生成线性渐变对象",
            "itemtype": "method",
            "name": "createLinearGradient",
            "params": [
                {
                    "name": "x1",
                    "description": "线性渐变起始点X坐标",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "线性渐变起始点Y坐标",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "线性渐变结束点X坐标",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "线性渐变结束点Y坐标",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "线性渐变对象",
                "type": "JmGradient"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 160,
            "description": "生成放射渐变对象",
            "itemtype": "method",
            "name": "createRadialGradient",
            "params": [
                {
                    "name": "x1",
                    "description": "放射渐变小圆中心X坐标",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "放射渐变小圆中心Y坐标",
                    "type": "Number"
                },
                {
                    "name": "r1",
                    "description": "放射渐变小圆半径",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "放射渐变大圆中心X坐标",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "放射渐变大圆中心Y坐标",
                    "type": "Number"
                },
                {
                    "name": "r2",
                    "description": "放射渐变大圆半径",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "放射渐变对象",
                "type": "JmGradient"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 177,
            "description": "重新刷新整个画板\n以加入动画事件触发延时10毫秒刷新，保存最尽的调用只刷新一次，加强性能的效果。",
            "itemtype": "method",
            "name": "refresh",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 191,
            "description": "重新刷新整个画板\n此方法直接重画，与refresh效果类似",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "w",
                    "description": "清除画布的宽度",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "清除画布的高度",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 204,
            "description": "清除画布",
            "itemtype": "method",
            "name": "clear",
            "params": [
                {
                    "name": "w",
                    "description": "清除画布的宽度",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "清除画布的高度",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 233,
            "description": "设置画布样式，此处只是设置其css样式",
            "itemtype": "method",
            "name": "css",
            "params": [
                {
                    "name": "name",
                    "description": "样式名",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "样式值",
                    "type": "String"
                }
            ],
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 246,
            "description": "生成路径对象",
            "itemtype": "method",
            "name": "createPath",
            "params": [
                {
                    "name": "points",
                    "description": "路径中的描点集合",
                    "type": "Array"
                },
                {
                    "name": "style",
                    "description": "当前路径的样式",
                    "type": "Style"
                }
            ],
            "return": {
                "description": "路径对象jmPath",
                "type": "JmPath"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 259,
            "description": "生成直线",
            "itemtype": "method",
            "name": "createLine",
            "params": [
                {
                    "name": "start",
                    "description": "直线的起点",
                    "type": "Point"
                },
                {
                    "name": "end",
                    "description": "直线的终点",
                    "type": "Point"
                },
                {
                    "name": "直线的样式",
                    "description": "",
                    "type": "Style"
                }
            ],
            "return": {
                "description": "直线对象",
                "type": "JmLine"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 273,
            "description": "重写获取当前控件的边界",
            "itemtype": "method",
            "name": "getBounds",
            "return": {
                "description": "当前画布的边界 {left,top,right,bottom,width,height}",
                "type": "Object"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 301,
            "description": "获取当前画布在浏览器中的绝对定位",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "返回定位坐标",
                "type": "Postion"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 316,
            "description": "检 查坐标是否落在当前控件区域中..true=在区域内\ngraph需要特殊处理，因为它是相对为整个页面的，接收所有事件再分发相对于它本身的子控件。",
            "itemtype": "method",
            "name": "checkPoint",
            "params": [
                {
                    "name": "p",
                    "description": "位置参数",
                    "type": "Point"
                }
            ],
            "return": {
                "description": "当前位置如果在区域内则为true,否则为false。",
                "type": "Boolean"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 336,
            "description": "缩小整个画布按比例0.9",
            "itemtype": "method",
            "name": "zoomOut",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 345,
            "description": "放大 每次增大0.1的比例",
            "itemtype": "method",
            "name": "zoomIn",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 354,
            "description": "大小复原",
            "itemtype": "method",
            "name": "zoomActual",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 368,
            "description": "宽度",
            "itemtype": "method",
            "name": "width",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 384,
            "description": "高度",
            "itemtype": "method",
            "name": "width",
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 400,
            "description": "放大缩小画布",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "dx",
                    "description": "缩放X轴比例",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "缩放Y轴比例",
                    "type": "Number"
                }
            ],
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "jmGraph.js",
            "line": 422,
            "description": "保存为base64图形数据",
            "itemtype": "method",
            "name": "toDataURL",
            "return": {
                "description": "当前画布图的base64字符串",
                "type": "String"
            },
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "loadJMGraph.js",
            "line": 1,
            "description": "加载整个组件依赖",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "callback",
                    "description": "回调函数callback为成功或失败后回调",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "jmGraph",
            "module": "jmGraph"
        },
        {
            "file": "loadJMGraph.js",
            "line": 56,
            "description": "加载js文件",
            "itemtype": "method",
            "name": "require",
            "params": [
                {
                    "name": "js",
                    "description": "需要加载的JS的路径",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "回调函数callback为成功或失败后回调",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "jmGraph",
            "module": "jmGraph"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: require",
            "line": " common\\jmProperty.js:93"
        },
        {
            "message": "unknown tag: retunr",
            "line": " common\\jmProperty.js:119"
        },
        {
            "message": "unknown tag: require",
            "line": " controls\\jmImage.js:1"
        },
        {
            "message": "unknown tag: this",
            "line": " lib\\excanvas.js:51"
        },
        {
            "message": "unknown tag: require",
            "line": " shapes\\jmArc.js:1"
        },
        {
            "message": "unknown tag: require",
            "line": " jmGraph.js:2"
        },
        {
            "message": "Missing item type\n根据控件zIndex排序，越大的越高",
            "line": " common\\jmControl.js:63"
        },
        {
            "message": "Missing item type\n鼠标事件处理对象，container 为事件主体，target为响应事件对象",
            "line": " common\\jmEvents.js:26"
        },
        {
            "message": "Missing item type\n健盘事件处理对象，container 为事件主体，target为响应事件对象",
            "line": " common\\jmEvents.js:119"
        },
        {
            "message": "Missing item type\n检查是否触发健盘事件至画布\n如果触发对象为输入框等对象则不响应事件",
            "line": " common\\jmEvents.js:126"
        },
        {
            "message": "Missing item type\n初始化健盘事件",
            "line": " common\\jmEvents.js:147"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:53"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:59"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:65"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:71"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:77"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:83"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:89"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:95"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:101"
        },
        {
            "message": "Missing item type\n兼容处理的空函数",
            "line": " common\\jmSvg.js:107"
        },
        {
            "message": "Missing item type\n绑定当前编辑器按健事件",
            "line": " editor\\jmEditor.js:448"
        },
        {
            "message": "Missing item type\nThis funtion is assigned to the <canvas> elements as element.getContext().",
            "line": " lib\\excanvas.js:51"
        },
        {
            "message": "Missing item type\nBinds a function to an object. The returned function will always use the\npassed in {@code obj} as {@code this}.\n\nExample:\n\n  g = bind(f, obj, a, b)\n  g(c, d) // will do f.call(obj, a, b, c, d)",
            "line": " lib\\excanvas.js:63"
        },
        {
            "message": "Missing item type\nPublic initializes a canvas element so that it can be used as canvas\nelement from now on. This is called automatically before the page is\nloaded but if you are creating elements using createElement you need to\nmake sure this is called on the element.",
            "line": " lib\\excanvas.js:128"
        },
        {
            "message": "Missing item type\nThis class implements CanvasRenderingContext2D interface as described by\nthe WHATWG.",
            "line": " lib\\excanvas.js:282"
        },
        {
            "message": "Missing item type",
            "line": " lib\\excanvas.js:776"
        },
        {
            "message": "Missing item type",
            "line": " lib\\excanvas.js:842"
        },
        {
            "message": "Missing item type\n获取当前控件的边界\n\njmBezier.prototype.getBounds = function() {\n\tthis.initPoints();\n\treturn this.base.getBounds.call(this);",
            "line": " shapes\\jmBezier.js:115"
        },
        {
            "message": "Missing item type\n获取当前控件的边界\n\njmCircle.prototype.getBounds = function() {\n\tthis.initPoints();\n\treturn this.base.getBounds.call(this);",
            "line": " shapes\\jmCircle.js:105"
        },
        {
            "message": "Missing item type\n获取当前控件的边界\n\njmHArc.prototype.getBounds = function() {\n\tthis.initPoints();\n\treturn this.base.getBounds.call(this);",
            "line": " shapes\\jmHArc.js:85"
        },
        {
            "message": "Missing item type\n开始画图\n//*\njmLine.prototype.draw = function() {\t\n\t\n\t//获取当前控件的绝对位置\n\tvar bounds = this.parent && this.parent.absoluteBounds?this.parent.absoluteBounds:this.absoluteBounds;\n\tvar startx = this.start.x + bounds.left;\n\tvar starty = this.start.y + bounds.top;\n\tthis.context.moveTo(startx,starty);\n\t\n\tif(this.style.lineType === 'dotted') {\t\t\t\n\t\tvar dx = this.end.x - this.start.x;\n\t\tvar dy = this.end.y - this.start.y;\n\t\tvar lineLen = Math.sqrt(dx * dx + dy * dy);\n\t\tdx = dx / lineLen;\n\t\tdy = dy / lineLen;\n\t\tvar dottedstart = false;\n\t\tvar dottedsp = this.style.dashLength / 2;\n\t\tfor(var l=this.style.dashLength; l<=lineLen;) {\n\t\t\tif(dottedstart == false) {\n\t\t\t\tthis.context.lineTo(startx + dx * l,starty+ dy * l);\n\t\t\t\tl += dottedsp;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.context.moveTo(startx + dx * l,starty+ dy * l);\n\t\t\t\tl += this.style.dashLength;\n\t\t\t}\n\t\t\tdottedstart = !dottedstart;\t\t\t\t\n\t\t}\n\t\tthis.context.lineTo(this.end.x+ bounds.left,this.end.y + bounds.top);\t\t\n\t}\n\telse {\t\t\t\n\t\tthis.context.lineTo(this.end.x+ bounds.left,this.end.y + bounds.top);\n\t}",
            "line": " shapes\\jmLine.js:74"
        },
        {
            "message": "Missing item type\n开始矩形\n//*\njmRect.prototype.draw = function() {\n\tvar p = this.position();\t\n\tif(p) {\n\t\t//获取当前控件的绝对位置\n\t\t//var bounds = this.parent && this.parent.absoluteBounds?this.parent.absoluteBounds:this.absoluteBounds;\n\t\t\n\t\tvar w = this.width();\n\t\tvar h = this.height();\n\t\tvar p2 = {x:p.x + w,y:p.y};\n\t\tvar p3 = {x:p.x + w,y:p.y + h};\n\t\tvar p4 = {x:p.x,y:p.y + h};\n\t\tthis.points = [];\n\t\tthis.points.push(p);\n\t\tthis.points.push(p2);\n\t\tthis.points.push(p3);\n\t\tthis.points.push(p4);\n\t\t//this.points.push(p1);\n\n\t\tthis.context.moveTo(p.x,p.y );\t\t\n\t\tthis.context.lineTo(p2.x,p2.y);\n\t\tthis.context.lineTo(p3.x,p3.y);\n\t\tthis.context.lineTo(p4.x,p4.y);\n\t\t//this.context.lineTo(p1.x,p1.y);\n\t}",
            "line": " shapes\\jmRect.js:110"
        }
    ]
}